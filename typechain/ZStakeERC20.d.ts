/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZStakeERC20Interface extends ethers.utils.Interface {
  functions: {
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "FEATURE_BURNS_ON_BEHALF()": FunctionFragment;
    "FEATURE_DELEGATIONS()": FunctionFragment;
    "FEATURE_DELEGATIONS_ON_BEHALF()": FunctionFragment;
    "FEATURE_OWN_BURNS()": FunctionFragment;
    "FEATURE_TRANSFERS()": FunctionFragment;
    "FEATURE_TRANSFERS_ON_BEHALF()": FunctionFragment;
    "FEATURE_UNSAFE_TRANSFERS()": FunctionFragment;
    "ROLE_ACCESS_MANAGER()": FunctionFragment;
    "ROLE_ERC20_RECEIVER()": FunctionFragment;
    "ROLE_ERC20_SENDER()": FunctionFragment;
    "ROLE_TOKEN_CREATOR()": FunctionFragment;
    "ROLE_TOKEN_DESTROYER()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateWithSig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "evaluateBy(address,uint256,uint256)": FunctionFragment;
    "features()": FunctionFragment;
    "getVotingPower(address)": FunctionFragment;
    "getVotingPowerAt(address,uint256)": FunctionFragment;
    "getVotingPowerHistory(address)": FunctionFragment;
    "getVotingPowerHistoryLength(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isFeatureEnabled(uint256)": FunctionFragment;
    "isOperatorInRole(address,uint256)": FunctionFragment;
    "isSenderInRole(uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenBalances(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferAllowances(address,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unsafeTransferFrom(address,address,uint256)": FunctionFragment;
    "updateFeatures(uint256)": FunctionFragment;
    "updateRole(address,uint256)": FunctionFragment;
    "userRoles(address)": FunctionFragment;
    "votingDelegates(address)": FunctionFragment;
    "votingPowerHistory(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_BURNS_ON_BEHALF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_DELEGATIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_DELEGATIONS_ON_BEHALF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_OWN_BURNS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_TRANSFERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_TRANSFERS_ON_BEHALF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_UNSAFE_TRANSFERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ACCESS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ERC20_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ERC20_SENDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_TOKEN_CREATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_TOKEN_DESTROYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateWithSig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateBy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "features", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerHistoryLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeatureEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorInRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSenderInRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userRoles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingDelegates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerHistory",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_BURNS_ON_BEHALF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_DELEGATIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_DELEGATIONS_ON_BEHALF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_OWN_BURNS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_TRANSFERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_TRANSFERS_ON_BEHALF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_UNSAFE_TRANSFERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ACCESS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ERC20_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ERC20_SENDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TOKEN_CREATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TOKEN_DESTROYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evaluateBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "features", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeatureEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorInRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSenderInRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerHistory",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Approved(address,address,uint256,uint256)": EventFragment;
    "Burnt(address,address,uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "Minted(address,address,uint256)": EventFragment;
    "RoleUpdated(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Transferred(address,address,address,uint256)": EventFragment;
    "VotingPowerChanged(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPowerChanged"): EventFragment;
}

export class ZStakeERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZStakeERC20Interface;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_BURNS_ON_BEHALF(overrides?: CallOverrides): Promise<[number]>;

    FEATURE_DELEGATIONS(overrides?: CallOverrides): Promise<[number]>;

    FEATURE_DELEGATIONS_ON_BEHALF(overrides?: CallOverrides): Promise<[number]>;

    FEATURE_OWN_BURNS(overrides?: CallOverrides): Promise<[number]>;

    FEATURE_TRANSFERS(overrides?: CallOverrides): Promise<[number]>;

    FEATURE_TRANSFERS_ON_BEHALF(overrides?: CallOverrides): Promise<[number]>;

    FEATURE_UNSAFE_TRANSFERS(overrides?: CallOverrides): Promise<[number]>;

    ROLE_ACCESS_MANAGER(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROLE_ERC20_RECEIVER(overrides?: CallOverrides): Promise<[number]>;

    ROLE_ERC20_SENDER(overrides?: CallOverrides): Promise<[number]>;

    ROLE_TOKEN_CREATOR(overrides?: CallOverrides): Promise<[number]>;

    ROLE_TOKEN_DESTROYER(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    burn(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateWithSig(
      _to: string,
      _nonce: BigNumberish,
      _exp: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    evaluateBy(
      operator: string,
      target: BigNumberish,
      desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    features(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotingPower(
      _of: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingPowerAt(
      _of: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingPowerHistory(
      _of: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber] & {
          blockNumber: BigNumber;
          votingPower: BigNumber;
        })[]
      ]
    >;

    getVotingPowerHistoryLength(
      _of: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isFeatureEnabled(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorInRole(
      operator: string,
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSenderInRole(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeatures(
      _mask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRole(
      operator: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRoles(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingDelegates(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    votingPowerHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        votingPower: BigNumber;
      }
    >;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  FEATURE_BURNS_ON_BEHALF(overrides?: CallOverrides): Promise<number>;

  FEATURE_DELEGATIONS(overrides?: CallOverrides): Promise<number>;

  FEATURE_DELEGATIONS_ON_BEHALF(overrides?: CallOverrides): Promise<number>;

  FEATURE_OWN_BURNS(overrides?: CallOverrides): Promise<number>;

  FEATURE_TRANSFERS(overrides?: CallOverrides): Promise<number>;

  FEATURE_TRANSFERS_ON_BEHALF(overrides?: CallOverrides): Promise<number>;

  FEATURE_UNSAFE_TRANSFERS(overrides?: CallOverrides): Promise<number>;

  ROLE_ACCESS_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

  ROLE_ERC20_RECEIVER(overrides?: CallOverrides): Promise<number>;

  ROLE_ERC20_SENDER(overrides?: CallOverrides): Promise<number>;

  ROLE_TOKEN_CREATOR(overrides?: CallOverrides): Promise<number>;

  ROLE_TOKEN_DESTROYER(overrides?: CallOverrides): Promise<number>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    _from: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateWithSig(
    _to: string,
    _nonce: BigNumberish,
    _exp: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  evaluateBy(
    operator: string,
    target: BigNumberish,
    desired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  features(overrides?: CallOverrides): Promise<BigNumber>;

  getVotingPower(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVotingPowerAt(
    _of: string,
    _blockNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingPowerHistory(
    _of: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      votingPower: BigNumber;
    })[]
  >;

  getVotingPowerHistoryLength(
    _of: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isFeatureEnabled(
    required: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorInRole(
    operator: string,
    required: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSenderInRole(
    required: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  safeTransferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAllowances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsafeTransferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeatures(
    _mask: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRole(
    operator: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingDelegates(arg0: string, overrides?: CallOverrides): Promise<string>;

  votingPowerHistory(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; votingPower: BigNumber }
  >;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    FEATURE_BURNS_ON_BEHALF(overrides?: CallOverrides): Promise<number>;

    FEATURE_DELEGATIONS(overrides?: CallOverrides): Promise<number>;

    FEATURE_DELEGATIONS_ON_BEHALF(overrides?: CallOverrides): Promise<number>;

    FEATURE_OWN_BURNS(overrides?: CallOverrides): Promise<number>;

    FEATURE_TRANSFERS(overrides?: CallOverrides): Promise<number>;

    FEATURE_TRANSFERS_ON_BEHALF(overrides?: CallOverrides): Promise<number>;

    FEATURE_UNSAFE_TRANSFERS(overrides?: CallOverrides): Promise<number>;

    ROLE_ACCESS_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ERC20_RECEIVER(overrides?: CallOverrides): Promise<number>;

    ROLE_ERC20_SENDER(overrides?: CallOverrides): Promise<number>;

    ROLE_TOKEN_CREATOR(overrides?: CallOverrides): Promise<number>;

    ROLE_TOKEN_DESTROYER(overrides?: CallOverrides): Promise<number>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _from: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegate(_to: string, overrides?: CallOverrides): Promise<void>;

    delegateWithSig(
      _to: string,
      _nonce: BigNumberish,
      _exp: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    evaluateBy(
      operator: string,
      target: BigNumberish,
      desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    features(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPower(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPowerAt(
      _of: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerHistory(
      _of: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        votingPower: BigNumber;
      })[]
    >;

    getVotingPowerHistoryLength(
      _of: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFeatureEnabled(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorInRole(
      operator: string,
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSenderInRole(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeatures(
      _mask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRole(
      operator: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingDelegates(arg0: string, overrides?: CallOverrides): Promise<string>;

    votingPowerHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        votingPower: BigNumber;
      }
    >;
  };

  filters: {
    Approval(
      _owner?: string | null,
      _spender?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _owner: string; _spender: string; _value: BigNumber }
    >;

    Approved(
      _owner?: string | null,
      _spender?: string | null,
      _oldValue?: null,
      _value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        _owner: string;
        _spender: string;
        _oldValue: BigNumber;
        _value: BigNumber;
      }
    >;

    Burnt(
      _by?: string | null,
      _from?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _by: string; _from: string; _value: BigNumber }
    >;

    DelegateChanged(
      _of?: string | null,
      _from?: string | null,
      _to?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _of: string; _from: string; _to: string }
    >;

    Minted(
      _by?: string | null,
      _to?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _by: string; _to: string; _value: BigNumber }
    >;

    RoleUpdated(
      _by?: string | null,
      _to?: string | null,
      _requested?: null,
      _actual?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _by: string; _to: string; _requested: BigNumber; _actual: BigNumber }
    >;

    Transfer(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _from: string; _to: string; _value: BigNumber }
    >;

    Transferred(
      _by?: string | null,
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _by: string; _from: string; _to: string; _value: BigNumber }
    >;

    VotingPowerChanged(
      _of?: string | null,
      _fromVal?: null,
      _toVal?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _of: string; _fromVal: BigNumber; _toVal: BigNumber }
    >;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_BURNS_ON_BEHALF(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_DELEGATIONS(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_DELEGATIONS_ON_BEHALF(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    FEATURE_OWN_BURNS(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_TRANSFERS(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_TRANSFERS_ON_BEHALF(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_UNSAFE_TRANSFERS(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ACCESS_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ERC20_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ERC20_SENDER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_TOKEN_CREATOR(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_TOKEN_DESTROYER(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateWithSig(
      _to: string,
      _nonce: BigNumberish,
      _exp: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    evaluateBy(
      operator: string,
      target: BigNumberish,
      desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    features(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPower(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPowerAt(
      _of: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerHistory(
      _of: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPowerHistoryLength(
      _of: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isFeatureEnabled(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorInRole(
      operator: string,
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSenderInRole(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeatures(
      _mask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRole(
      operator: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingDelegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPowerHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEATURE_BURNS_ON_BEHALF(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_DELEGATIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_DELEGATIONS_ON_BEHALF(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_OWN_BURNS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEATURE_TRANSFERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEATURE_TRANSFERS_ON_BEHALF(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_UNSAFE_TRANSFERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ACCESS_MANAGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ERC20_RECEIVER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_ERC20_SENDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_TOKEN_CREATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_TOKEN_DESTROYER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _from: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateWithSig(
      _to: string,
      _nonce: BigNumberish,
      _exp: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    evaluateBy(
      operator: string,
      target: BigNumberish,
      desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    features(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingPower(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPowerAt(
      _of: string,
      _blockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPowerHistory(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPowerHistoryLength(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isFeatureEnabled(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorInRole(
      operator: string,
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSenderInRole(
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAllowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeatures(
      _mask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRole(
      operator: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRoles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingDelegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPowerHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
